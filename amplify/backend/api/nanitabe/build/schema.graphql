
type UserTable @aws_iam @aws_api_key {
  id: ID!
  userName: String
  iconUrl: String
  currentAddress: String
  nickname: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type SellTable @aws_iam @aws_api_key {
  id: ID!
  goodsName: String
  comment: String
  PickupPlace: String
  userName: String
  createdDate: AWSDateTime
  imageUrl: String!
  salesTerm: AWSDateTime
  imageUrl2: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserTableConnection @aws_api_key @aws_iam {
  items: [UserTable]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelUserTableFilterInput {
  id: ModelIDInput
  userName: ModelStringInput
  iconUrl: ModelStringInput
  currentAddress: ModelStringInput
  nickname: ModelStringInput
  and: [ModelUserTableFilterInput]
  or: [ModelUserTableFilterInput]
  not: ModelUserTableFilterInput
}

type Query {
  getUserTable(id: ID!): UserTable @aws_api_key @aws_iam
  listUserTables(filter: ModelUserTableFilterInput, limit: Int, nextToken: String): ModelUserTableConnection @aws_api_key @aws_iam
  syncUserTables(filter: ModelUserTableFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelUserTableConnection @aws_api_key @aws_iam
  getSellTable(id: ID!): SellTable @aws_api_key @aws_iam
  listSellTables(filter: ModelSellTableFilterInput, limit: Int, nextToken: String): ModelSellTableConnection @aws_api_key @aws_iam
  syncSellTables(filter: ModelSellTableFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelSellTableConnection @aws_api_key @aws_iam
}

input ModelUserTableConditionInput {
  userName: ModelStringInput
  iconUrl: ModelStringInput
  currentAddress: ModelStringInput
  nickname: ModelStringInput
  and: [ModelUserTableConditionInput]
  or: [ModelUserTableConditionInput]
  not: ModelUserTableConditionInput
}

input CreateUserTableInput {
  id: ID
  userName: String
  iconUrl: String
  currentAddress: String
  nickname: String
  _version: Int
}

input UpdateUserTableInput {
  id: ID!
  userName: String
  iconUrl: String
  currentAddress: String
  nickname: String
  _version: Int
}

input DeleteUserTableInput {
  id: ID!
  _version: Int
}

type Mutation {
  createUserTable(input: CreateUserTableInput!, condition: ModelUserTableConditionInput): UserTable @aws_api_key @aws_iam
  updateUserTable(input: UpdateUserTableInput!, condition: ModelUserTableConditionInput): UserTable @aws_api_key @aws_iam
  deleteUserTable(input: DeleteUserTableInput!, condition: ModelUserTableConditionInput): UserTable @aws_api_key @aws_iam
  createSellTable(input: CreateSellTableInput!, condition: ModelSellTableConditionInput): SellTable @aws_api_key @aws_iam
  updateSellTable(input: UpdateSellTableInput!, condition: ModelSellTableConditionInput): SellTable @aws_api_key @aws_iam
  deleteSellTable(input: DeleteSellTableInput!, condition: ModelSellTableConditionInput): SellTable @aws_api_key @aws_iam
}

input ModelSubscriptionUserTableFilterInput {
  id: ModelSubscriptionIDInput
  userName: ModelSubscriptionStringInput
  iconUrl: ModelSubscriptionStringInput
  currentAddress: ModelSubscriptionStringInput
  nickname: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserTableFilterInput]
  or: [ModelSubscriptionUserTableFilterInput]
}

type Subscription {
  onCreateUserTable(filter: ModelSubscriptionUserTableFilterInput): UserTable @aws_subscribe(mutations: ["createUserTable"]) @aws_api_key @aws_iam
  onUpdateUserTable(filter: ModelSubscriptionUserTableFilterInput): UserTable @aws_subscribe(mutations: ["updateUserTable"]) @aws_api_key @aws_iam
  onDeleteUserTable(filter: ModelSubscriptionUserTableFilterInput): UserTable @aws_subscribe(mutations: ["deleteUserTable"]) @aws_api_key @aws_iam
  onCreateSellTable(filter: ModelSubscriptionSellTableFilterInput): SellTable @aws_subscribe(mutations: ["createSellTable"]) @aws_api_key @aws_iam
  onUpdateSellTable(filter: ModelSubscriptionSellTableFilterInput): SellTable @aws_subscribe(mutations: ["updateSellTable"]) @aws_api_key @aws_iam
  onDeleteSellTable(filter: ModelSubscriptionSellTableFilterInput): SellTable @aws_subscribe(mutations: ["deleteSellTable"]) @aws_api_key @aws_iam
}

type ModelSellTableConnection @aws_api_key @aws_iam {
  items: [SellTable]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelSellTableFilterInput {
  id: ModelIDInput
  goodsName: ModelStringInput
  comment: ModelStringInput
  PickupPlace: ModelStringInput
  userName: ModelStringInput
  createdDate: ModelStringInput
  imageUrl: ModelStringInput
  salesTerm: ModelStringInput
  imageUrl2: ModelStringInput
  and: [ModelSellTableFilterInput]
  or: [ModelSellTableFilterInput]
  not: ModelSellTableFilterInput
}

input ModelSellTableConditionInput {
  goodsName: ModelStringInput
  comment: ModelStringInput
  PickupPlace: ModelStringInput
  userName: ModelStringInput
  createdDate: ModelStringInput
  imageUrl: ModelStringInput
  salesTerm: ModelStringInput
  imageUrl2: ModelStringInput
  and: [ModelSellTableConditionInput]
  or: [ModelSellTableConditionInput]
  not: ModelSellTableConditionInput
}

input CreateSellTableInput {
  id: ID
  goodsName: String
  comment: String
  PickupPlace: String
  userName: String
  createdDate: AWSDateTime
  imageUrl: String!
  salesTerm: AWSDateTime
  imageUrl2: String
  _version: Int
}

input UpdateSellTableInput {
  id: ID!
  goodsName: String
  comment: String
  PickupPlace: String
  userName: String
  createdDate: AWSDateTime
  imageUrl: String
  salesTerm: AWSDateTime
  imageUrl2: String
  _version: Int
}

input DeleteSellTableInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionSellTableFilterInput {
  id: ModelSubscriptionIDInput
  goodsName: ModelSubscriptionStringInput
  comment: ModelSubscriptionStringInput
  PickupPlace: ModelSubscriptionStringInput
  userName: ModelSubscriptionStringInput
  createdDate: ModelSubscriptionStringInput
  imageUrl: ModelSubscriptionStringInput
  salesTerm: ModelSubscriptionStringInput
  imageUrl2: ModelSubscriptionStringInput
  and: [ModelSubscriptionSellTableFilterInput]
  or: [ModelSubscriptionSellTableFilterInput]
}

