
type Users @aws_iam @aws_api_key {
  id: ID!
  userName: String
  iconUrl: String
  Sells(filter: ModelSellsFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelSellsConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Sells @aws_iam @aws_api_key {
  id: ID!
  goodsName: String
  comment: String
  howPickup: String
  PickupPlace: String
  price: Int
  usernName: String
  createdBy: AWSDateTime
  imageUrl1: String!
  imageUrl2: String
  imageUrl3: String
  imageUrl4: String
  imageUrl5: String
  usersID: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUsersConnection @aws_api_key @aws_iam {
  items: [Users]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelUsersFilterInput {
  id: ModelIDInput
  userName: ModelStringInput
  iconUrl: ModelStringInput
  and: [ModelUsersFilterInput]
  or: [ModelUsersFilterInput]
  not: ModelUsersFilterInput
}

type Query {
  getUsers(id: ID!): Users @aws_api_key @aws_iam
  listUsers(filter: ModelUsersFilterInput, limit: Int, nextToken: String): ModelUsersConnection @aws_api_key @aws_iam
  syncUsers(filter: ModelUsersFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelUsersConnection @aws_api_key @aws_iam
  getSells(id: ID!): Sells @aws_api_key @aws_iam
  listSells(filter: ModelSellsFilterInput, limit: Int, nextToken: String): ModelSellsConnection @aws_api_key @aws_iam
  syncSells(filter: ModelSellsFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelSellsConnection @aws_api_key @aws_iam
  sellsByUsersID(usersID: ID!, sortDirection: ModelSortDirection, filter: ModelSellsFilterInput, limit: Int, nextToken: String): ModelSellsConnection @aws_api_key @aws_iam
}

input ModelUsersConditionInput {
  userName: ModelStringInput
  iconUrl: ModelStringInput
  and: [ModelUsersConditionInput]
  or: [ModelUsersConditionInput]
  not: ModelUsersConditionInput
}

input CreateUsersInput {
  id: ID
  userName: String
  iconUrl: String
  _version: Int
}

input UpdateUsersInput {
  id: ID!
  userName: String
  iconUrl: String
  _version: Int
}

input DeleteUsersInput {
  id: ID!
  _version: Int
}

type Mutation {
  createUsers(input: CreateUsersInput!, condition: ModelUsersConditionInput): Users @aws_api_key @aws_iam
  updateUsers(input: UpdateUsersInput!, condition: ModelUsersConditionInput): Users @aws_api_key @aws_iam
  deleteUsers(input: DeleteUsersInput!, condition: ModelUsersConditionInput): Users @aws_api_key @aws_iam
  createSells(input: CreateSellsInput!, condition: ModelSellsConditionInput): Sells @aws_api_key @aws_iam
  updateSells(input: UpdateSellsInput!, condition: ModelSellsConditionInput): Sells @aws_api_key @aws_iam
  deleteSells(input: DeleteSellsInput!, condition: ModelSellsConditionInput): Sells @aws_api_key @aws_iam
}

input ModelSubscriptionUsersFilterInput {
  id: ModelSubscriptionIDInput
  userName: ModelSubscriptionStringInput
  iconUrl: ModelSubscriptionStringInput
  and: [ModelSubscriptionUsersFilterInput]
  or: [ModelSubscriptionUsersFilterInput]
}

type Subscription {
  onCreateUsers(filter: ModelSubscriptionUsersFilterInput): Users @aws_subscribe(mutations: ["createUsers"]) @aws_api_key @aws_iam
  onUpdateUsers(filter: ModelSubscriptionUsersFilterInput): Users @aws_subscribe(mutations: ["updateUsers"]) @aws_api_key @aws_iam
  onDeleteUsers(filter: ModelSubscriptionUsersFilterInput): Users @aws_subscribe(mutations: ["deleteUsers"]) @aws_api_key @aws_iam
  onCreateSells(filter: ModelSubscriptionSellsFilterInput): Sells @aws_subscribe(mutations: ["createSells"]) @aws_api_key @aws_iam
  onUpdateSells(filter: ModelSubscriptionSellsFilterInput): Sells @aws_subscribe(mutations: ["updateSells"]) @aws_api_key @aws_iam
  onDeleteSells(filter: ModelSubscriptionSellsFilterInput): Sells @aws_subscribe(mutations: ["deleteSells"]) @aws_api_key @aws_iam
}

type ModelSellsConnection @aws_iam @aws_api_key {
  items: [Sells]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelSellsFilterInput {
  id: ModelIDInput
  goodsName: ModelStringInput
  comment: ModelStringInput
  howPickup: ModelStringInput
  PickupPlace: ModelStringInput
  price: ModelIntInput
  usernName: ModelStringInput
  createdBy: ModelStringInput
  imageUrl1: ModelStringInput
  imageUrl2: ModelStringInput
  imageUrl3: ModelStringInput
  imageUrl4: ModelStringInput
  imageUrl5: ModelStringInput
  usersID: ModelIDInput
  and: [ModelSellsFilterInput]
  or: [ModelSellsFilterInput]
  not: ModelSellsFilterInput
}

input ModelSellsConditionInput {
  goodsName: ModelStringInput
  comment: ModelStringInput
  howPickup: ModelStringInput
  PickupPlace: ModelStringInput
  price: ModelIntInput
  usernName: ModelStringInput
  createdBy: ModelStringInput
  imageUrl1: ModelStringInput
  imageUrl2: ModelStringInput
  imageUrl3: ModelStringInput
  imageUrl4: ModelStringInput
  imageUrl5: ModelStringInput
  usersID: ModelIDInput
  and: [ModelSellsConditionInput]
  or: [ModelSellsConditionInput]
  not: ModelSellsConditionInput
}

input CreateSellsInput {
  id: ID
  goodsName: String
  comment: String
  howPickup: String
  PickupPlace: String
  price: Int
  usernName: String
  createdBy: AWSDateTime
  imageUrl1: String!
  imageUrl2: String
  imageUrl3: String
  imageUrl4: String
  imageUrl5: String
  usersID: ID!
  _version: Int
}

input UpdateSellsInput {
  id: ID!
  goodsName: String
  comment: String
  howPickup: String
  PickupPlace: String
  price: Int
  usernName: String
  createdBy: AWSDateTime
  imageUrl1: String
  imageUrl2: String
  imageUrl3: String
  imageUrl4: String
  imageUrl5: String
  usersID: ID
  _version: Int
}

input DeleteSellsInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionSellsFilterInput {
  id: ModelSubscriptionIDInput
  goodsName: ModelSubscriptionStringInput
  comment: ModelSubscriptionStringInput
  howPickup: ModelSubscriptionStringInput
  PickupPlace: ModelSubscriptionStringInput
  price: ModelSubscriptionIntInput
  usernName: ModelSubscriptionStringInput
  createdBy: ModelSubscriptionStringInput
  imageUrl1: ModelSubscriptionStringInput
  imageUrl2: ModelSubscriptionStringInput
  imageUrl3: ModelSubscriptionStringInput
  imageUrl4: ModelSubscriptionStringInput
  imageUrl5: ModelSubscriptionStringInput
  usersID: ModelSubscriptionIDInput
  and: [ModelSubscriptionSellsFilterInput]
  or: [ModelSubscriptionSellsFilterInput]
}

